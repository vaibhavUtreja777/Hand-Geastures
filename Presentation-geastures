import os
import cv2
from cvzone.HandTrackingModule import HandDetector
import numpy as np
from pdf2image import convert_from_path

# Parameters
width = 1280
height = 720
folderPath = "PresentationPhotos"

# Check if the folder exists and delete existing images
if os.path.exists(folderPath):
    for filename in os.listdir(folderPath):
        file_path = os.path.join(folderPath, filename)
        if os.path.isfile(file_path):
            os.remove(file_path)
else:
    os.makedirs(folderPath)  # Create the folder if it doesn't exist

# Camera Setup
cap = cv2.VideoCapture(1)
cap.set(3, width)
cap.set(4, height)


# Function to convert PDF pages to images
def convert_pdf_to_images(pdf_path):
    images = convert_from_path(pdf_path)

    for i, image in enumerate(images):
        image_path = os.path.join(folderPath, f"{i + 1}.png")
        image.save(image_path, 'PNG')
    print(f"PDF converted to images and saved in {folderPath}")


# Ask the user for the PDF file path
file_path = input("Enter the path to your PDF file: ")

# Convert the PDF into images
convert_pdf_to_images(file_path)

# Get list of Presentation Images
pathImages = sorted(os.listdir(folderPath), key=len)
if not pathImages:
    print("No images found in the folder. Make sure the PDF was converted properly.")
    exit()

# Variables
imgNumber = 0
hs, ws = int(120 * 1.2), int(213 * 1.2)
gestureThreshold = 400
buttonPressed = False
buttonCounter = 0
buttonDelay = 20
annotations = [[]]
annotationNumber = 0
annotationStart = False

# HandDetector
detector = HandDetector(detectionCon=0.8, maxHands=1)


def resize_image(image, target_width, target_height):
    # Get original dimensions
    original_height, original_width = image.shape[:2]

    # Calculate aspect ratios
    aspect_ratio = original_width / original_height
    target_aspect_ratio = target_width / target_height

    # Resize while maintaining aspect ratio
    if aspect_ratio > target_aspect_ratio:
        new_width = target_width
        new_height = int(target_width / aspect_ratio)
    else:
        new_height = target_height
        new_width = int(target_height * aspect_ratio)

    resized_image = cv2.resize(image, (new_width, new_height))

    # Create a black background
    background = np.zeros((target_height, target_width, 3), dtype=np.uint8)

    # Center the image on the background
    x_offset = (target_width - new_width) // 2
    y_offset = (target_height - new_height) // 2
    background[y_offset:y_offset + new_height, x_offset:x_offset + new_width] = resized_image

    return background


while True:
    # Import Images
    success, img = cap.read()
    img = cv2.flip(img, 1)

    # Load the current presentation image
    pathFullImage = os.path.join(folderPath, pathImages[imgNumber])
    imgCurrent = cv2.imread(pathFullImage)

    # Resize the image while maintaining aspect ratio
    imgCurrent = resize_image(imgCurrent, width, height)

    hands, img = detector.findHands(img)
    cv2.line(img, (0, gestureThreshold), (width, gestureThreshold), (0, 255, 0), 10)

    if hands and buttonPressed is False:
        hand = hands[0]
        fingers = detector.fingersUp(hand)
        cx, cy = hand['center']
        lmList = hand['lmList']

        # Constrain values for easier drawing
        xVal = int(np.interp(lmList[8][0], [width // 2, width], [0, width]))
        yVal = int(np.interp(lmList[8][1], [150, height - 150], [0, height]))
        indexFinger = xVal, yVal

        if cy <= gestureThreshold:  # Checking that Hand is at the height of the face
            annotationStart = False
            # Gesture 1 - Left
            if fingers == [1, 0, 0, 0, 0]:
                annotationStart = False
                print("Left")
                if imgNumber > 0:
                    buttonPressed = True
                    annotations = [[]]
                    annotationNumber = 0
                    imgNumber -= 1

            # Gesture 2 - Right
            if fingers == [0, 0, 0, 0, 1]:
                annotationStart = False
                print("Right")
                if imgNumber < len(pathImages) - 1:
                    buttonPressed = True
                    annotations = [[]]
                    annotationNumber = 0
                    imgNumber += 1

        # Gesture 3 - Show Pointer
        if fingers == [0, 1, 0, 0, 0]:
            cv2.circle(imgCurrent, indexFinger, 12, [0, 0, 255], cv2.FILLED)
            annotationStart = False

        # Gesture 4 - Draw Pointer
        if fingers == [0, 1, 1, 0, 0]:
            if annotationStart is False:
                annotationStart = True
                annotationNumber += 1
                annotations.append([])
            cv2.circle(imgCurrent, indexFinger, 12, [0, 0, 255], cv2.FILLED)
            annotations[annotationNumber].append(indexFinger)
        else:
            annotationStart = False

        # Gesture 5 - Erase
        if fingers == [0, 1, 1, 1, 0]:
            if annotations:
                if annotationNumber >= 0:
                    annotations.pop(-1)
                    annotationNumber -= 1
                    buttonPressed = True
    else:
        annotationStart = False

    # Button Pressed Iterations
    if buttonPressed:
        buttonCounter += 1
        if buttonCounter > buttonDelay:
            buttonCounter = 0
            buttonPressed = False

    for i in range(len(annotations)):
        for j in range(len(annotations[i])):
            if j != 0:
                cv2.line(imgCurrent, annotations[i][j - 1], annotations[i][j], (0, 0, 200), 12)

    # Adding Webcam Image on Slides
    imgSmall = cv2.resize(img, (ws, hs))
    h, w, _ = imgCurrent.shape
    imgCurrent[0:hs, w - ws:w] = imgSmall

    cv2.imshow("Image", img)
    cv2.imshow("Slides", imgCurrent)
    key = cv2.waitKey(1)
    if key == ord('q'):
        break
